// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

// Результат проверки Access Token и пользователь, для которого он был создан.
type AuthResponse struct {
	AccessToken *Token `json:"accessToken"`
	User        *User  `json:"user"`
}

// Вход в сервис обработки путевых листов.
type Login struct {
	// Почта пользователя.
	Email string `json:"email"`
	// Пароль пользователя.
	Password string `json:"password"`
	// TOTP пароль
	Totp string `json:"totp"`
}

type PeriodFilter struct {
	Start time.Time  `json:"start"`
	End   *time.Time `json:"end"`
}

// Refresh Token для получения нового Access Token и Refresh Token.
type RefreshToken struct {
	Response string `json:"response"`
}

type TableFilter struct {
	Period   *PeriodFilter `json:"period"`
	Cars     []string      `json:"cars"`
	FuelType string        `json:"fuelType"`
}

// Сгенерированный сервером Access Token и Refresh Token для обновления.
type Token struct {
	AccessToken      string `json:"accessToken"`
	AccessExpiredAt  string `json:"accessExpiredAt"`
	RefreshToken     string `json:"refreshToken"`
	RefreshExpiredAt string `json:"refreshExpiredAt"`
}

// Роли сервиса.
type Role string

const (
	RoleAdmin    Role = "ADMIN"
	RoleMechanic Role = "MECHANIC"
	RoleDriver   Role = "DRIVER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleMechanic,
	RoleDriver,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleMechanic, RoleDriver:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
