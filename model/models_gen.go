// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

// Результат проверки Access Token и пользователь. для которого он был создан.
type AuthResponse struct {
	Response string `json:"response"`
	User     *User  `json:"user"`
}

// Вход в сервис обработки путевых листов.
type Login struct {
	// Почта пользователя.
	Email string `json:"email"`
	// Пароль пользователя.
	Password string `json:"password"`
}

// Refresh Token для получения нового Access Token и Refresh Token.
type RefreshToken struct {
	Response string `json:"response"`
}

// Роли сервиса.
type Role string

const (
	RoleAdmin    Role = "ADMIN"
	RoleMechanic Role = "MECHANIC"
	RoleDriver   Role = "DRIVER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleMechanic,
	RoleDriver,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleMechanic, RoleDriver:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
